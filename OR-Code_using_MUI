import React, { useState } from "react";
import QRCode from "react-qr-code"; // Updated import
// import { Grid22 as Grid2 } from "@mui/material";
// import Grid2 from "@mui/material/Unstable_Grid22";
import {
  Container,
  Typography,
  TextField,
  Button,
  Box,
  Paper,
  Grid2,
  CircularProgress,
} from "@mui/material";

function QRcode() {
  const [inputText, setInputText] = useState("");
  const [qrCodeText, setQrCodeText] = useState("");
  const [loading, setLoading] = useState(false);

  const handleGenerateQRCode = () => {
    setLoading(true);
    setTimeout(() => {
      setQrCodeText(inputText);
      setLoading(false);
    }, 1000); // Simulate loading delay
  };

  const handleDownloadQRCode = () => {
    const svg = document.getElementById("qr-code");
    const svgData = new XMLSerializer().serializeToString(svg);
    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");
    const img = new Image();

    img.onload = () => {
      canvas.width = img.width;
      canvas.height = img.height;
      ctx.drawImage(img, 0, 0);
      const pngUrl = canvas.toDataURL("image/png");
      let downloadLink = document.createElement("a");
      downloadLink.href = pngUrl;
      downloadLink.download = "qr-code.png";
      document.body.appendChild(downloadLink);
      downloadLink.click();
      document.body.removeChild(downloadLink);
    };

    img.src = `data:image/svg+xml;base64,${btoa(svgData)}`;
  };

  return (
    <Container maxWidth="sm" sx={{ mt: 8 }}>
      <Paper elevation={3} sx={{ p: 4, borderRadius: 2 }}>
        <Typography variant="h4" align="center" gutterBottom>
          QR Code Generator
        </Typography>
        <TextField
          fullWidth
          label="Enter Text or URL"
          variant="outlined"
          value={inputText}
          onChange={(e) => setInputText(e.target.value)}
          sx={{ mb: 3 }}
        />
        <Grid2 container spacing={2} justifyContent="center">
          <Grid2 item>
            <Button
              variant="contained"
              color="primary"
              onClick={handleGenerateQRCode}
              disabled={!inputText || loading}
            >
              {loading ? <CircularProgress size={24} /> : "Generate QR Code"}
            </Button>
          </Grid2>
          <Grid2 item>
            <Button
              variant="contained"
              color="secondary"
              onClick={handleDownloadQRCode}
              disabled={!qrCodeText}
            >
              Download QR Code
            </Button>
          </Grid2>
        </Grid2>
        {qrCodeText && (
          <Box sx={{ mt: 4, display: "flex", justifyContent: "center" }}>
            <Paper elevation={2} sx={{ p: 2, borderRadius: 2 }}>
              <QRCode id="qr-code" value={qrCodeText} size={200} />
            </Paper>
          </Box>
        )}
      </Paper>
    </Container>
  );
}

export default QRcode;
